<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java常用类</title>
    <url>/2020/04/08/java%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="java常用类"><a href="#java常用类" class="headerlink" title="java常用类"></a>java常用类</h1><a id="more"></a>

<h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><h3 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比较两个字符串是否相等</span></span><br><span class="line">equals(String str)</span><br><span class="line"><span class="comment">//比较两个字符串是否相等（忽略大小写）</span></span><br><span class="line">equalsIgnoreCase(String str)</span><br><span class="line"><span class="comment">//判断字符串是否以指定字符串开始或结束</span></span><br><span class="line">startWith(String prefix)</span><br><span class="line">endsWith(String suffix)</span><br><span class="line"><span class="comment">//判断一个字符串是否大于、等于或小于另一个字符串（依据他们在字典中的顺序）</span></span><br><span class="line">compareTo(String str)</span><br></pre></td></tr></table></figure>

<h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">length()</span><br></pre></td></tr></table></figure>

<h3 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全改为大写</span></span><br><span class="line">toLowerCase()</span><br><span class="line"><span class="comment">//全改为小写</span></span><br><span class="line">toUpperCase()</span><br></pre></td></tr></table></figure>

<h3 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//搜索字符或字符串首次出现的位置</span></span><br><span class="line">indexOf(<span class="keyword">int</span> ch)</span><br><span class="line">indexOf(String str)</span><br><span class="line">indexOf(<span class="keyword">int</span> ch, <span class="keyword">int</span> startIndex)</span><br><span class="line">indexOf(String str, <span class="keyword">int</span> startIndex)</span><br><span class="line"><span class="comment">//搜索字符或字符串最后一次出现的位置</span></span><br><span class="line">lastIndexOf(<span class="keyword">int</span> ch)</span><br><span class="line">lastIndexOf(String str)</span><br><span class="line">lastIndexOf(<span class="keyword">int</span> ch, <span class="keyword">int</span> startIndex)</span><br><span class="line">lastIndexOf(String str, <span class="keyword">int</span> startIndex)</span><br></pre></td></tr></table></figure>

<h3 id="从现有字符串中截取子字符串"><a href="#从现有字符串中截取子字符串" class="headerlink" title="从现有字符串中截取子字符串"></a>从现有字符串中截取子字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">substring(<span class="keyword">int</span> beginIndex)</span><br><span class="line">substring(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span><br></pre></td></tr></table></figure>

<h3 id="去掉字符串首尾空格"><a href="#去掉字符串首尾空格" class="headerlink" title="去掉字符串首尾空格"></a>去掉字符串首尾空格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trim()</span><br></pre></td></tr></table></figure>

<h3 id="替换字符串中的字符或字串"><a href="#替换字符串中的字符或字串" class="headerlink" title="替换字符串中的字符或字串"></a>替换字符串中的字符或字串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">replace(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span><br></pre></td></tr></table></figure>

<h3 id="分割字符"><a href="#分割字符" class="headerlink" title="分割字符"></a>分割字符</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">split(String regex, <span class="keyword">int</span> limit)</span><br></pre></td></tr></table></figure>

<h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">format(String format, Object obj)</span><br><span class="line">format(Locale locale, String format, Object obj)</span><br></pre></td></tr></table></figure>



<h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><h3 id="无参数的构造方法"><a href="#无参数的构造方法" class="headerlink" title="无参数的构造方法"></a>无参数的构造方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Date date &#x3D; new Date();</span><br></pre></td></tr></table></figure>

<h3 id="有参数的构造方法"><a href="#有参数的构造方法" class="headerlink" title="有参数的构造方法"></a>有参数的构造方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Date date &#x3D; new Date(1000);</span><br></pre></td></tr></table></figure>



<h2 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h2><p>实现用户的输入</p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Scanner(in)</span><br><span class="line"></span><br><span class="line">new Scanner(file)</span><br></pre></td></tr></table></figure>



<h2 id="Math和Random类"><a href="#Math和Random类" class="headerlink" title="Math和Random类"></a>Math和Random类</h2><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;返回a的绝对值</span><br><span class="line">abs(double a)</span><br><span class="line">&#x2F;&#x2F;返回a、b的最大值</span><br><span class="line">max(double a, double b)</span><br><span class="line">&#x2F;&#x2F;返回a、b的最小值</span><br><span class="line">min(double a, double b)</span><br><span class="line">&#x2F;&#x2F;返回a的b次幂</span><br><span class="line">pow(double a, double b)</span><br><span class="line">&#x2F;&#x2F;返回a的平方根</span><br><span class="line">sqrt(double a)</span><br><span class="line">&#x2F;&#x2F;返回a的对数</span><br><span class="line">log(double a)</span><br><span class="line">&#x2F;&#x2F;返回a的正弦值</span><br><span class="line">sin(double a)</span><br><span class="line">&#x2F;&#x2F;返回a的反正弦值</span><br><span class="line">asin(double a)</span><br><span class="line">&#x2F;&#x2F;产生一个0到1之间的随机数，不包括0和1</span><br><span class="line">random()</span><br></pre></td></tr></table></figure>

<h3 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Random(long seed)</span><br></pre></td></tr></table></figure>



<h2 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h2><h3 id="Formatter类"><a href="#Formatter类" class="headerlink" title="Formatter类"></a>Formatter类</h3><blockquote>
<ol>
<li><p>格式化模式</p>
<p>format方法中一个使用双引号括起来的字符序列，由格式符与普通字符构</p>
</li>
<li><p>值列表</p>
<p>使用逗号分隔的变量、常量或表达式</p>
</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;例</span><br><span class="line">String m &#x3D; String.format(&quot;%d元%.1f箱%d斤&quot;, 78,8.0,125)</span><br></pre></td></tr></table></figure>

<h3 id="格式化整数"><a href="#格式化整数" class="headerlink" title="格式化整数"></a>格式化整数</h3><h4 id="1-d-o-x-X"><a href="#1-d-o-x-X" class="headerlink" title="1. %d, %o, %x, %X"></a>1. %d, %o, %x, %X</h4><h4 id="2-修饰符"><a href="#2-修饰符" class="headerlink" title="2. 修饰符"></a>2. 修饰符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;+&quot;加号修饰符：格式化正整数时，强制添加正号</span><br><span class="line">&quot;,&quot;逗号修饰符：格式化整数时，按千分组</span><br></pre></td></tr></table></figure>

<h3 id="数据的宽度"><a href="#数据的宽度" class="headerlink" title="数据的宽度"></a>数据的宽度</h3><p>返回的字符串的长度。一般格式为“%md”，效果是在数字的左面增加空格</p>
<p>或“%-md”，效果是在数字的右面增加空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String m &#x3D; String.format(&quot;%6d&quot;, 63)</span><br></pre></td></tr></table></figure>

<h3 id="格式化浮点数"><a href="#格式化浮点数" class="headerlink" title="格式化浮点数"></a>格式化浮点数</h3><h4 id="1-f-e-g-a"><a href="#1-f-e-g-a" class="headerlink" title="1. %f, %e, %g, %a"></a>1. %f, %e, %g, %a</h4><h4 id="2-修饰符（同上）"><a href="#2-修饰符（同上）" class="headerlink" title="2. 修饰符（同上）"></a>2. 修饰符（同上）</h4><h3 id="限制小数位的宽度"><a href="#限制小数位的宽度" class="headerlink" title="限制小数位的宽度"></a>限制小数位的宽度</h3><p>“%.nf”限制小数的位数，n是保留的小数位数。</p>
<p>宽度一般格式为“%md”，效果是在数字的左面增加空格</p>
<p>或“%-md”，效果是在数字的右面增加空格</p>
<h2 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h2><p>StringBuffer对象创建的字符串可以修改</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">使用第一个无参的构造方法创建StringBuffer对象后，分配给该对象的初始容量可以容纳16个字符。当该对象的实体存放的字符序列的长度大于16时，实体的容量自动增加，以便存放所有增加的字符。StringBuffer对象可以通过length()方法获取实体中存放的字符序列的长度，通过capacity()方法获取当前实体的实际容量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">StringBuffer()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">使用第二个带有int参数的构造方法创建StringBuffer对象后，分配给该对象的初始容量是由参数size指定。当该对象的实体存放的字符序列的长度大于size时，实体的容量自动增加，以便存放所有增加的字符。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">StringBuffer(<span class="keyword">int</span> size)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">使用第三个带有String参数的构造方法创建StringBuffer对象后，分配给该对象的初始容量为参数字符串s的长度额外在增加16个字符。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">StringBuffer(String s)</span><br></pre></td></tr></table></figure>

<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用append方法可以将其他Java类型数据转化为字符串后，再追加到StringBuffer对象中。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">将一个字符串对象追加到当前StringBuffer对象中，并返回当前StringBuffer对象的引用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment">将一个int型数据转化为字符串对象后再追加到当前StringBuffer对象中，并返回当前StringBuffer对象的引用。</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment">将一个Object对象o的字符串表示追加到当前StringBuffer对象中，并返回当前StringBuffer对象的引用。</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//类似的方法还有：</span></span></span><br><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(<span class="keyword">long</span> n)</span></span></span><br><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(<span class="keyword">float</span> f)</span></span></span><br><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(<span class="keyword">double</span> d)</span>。</span></span><br></pre></td></tr></table></figure>

<h4 id="charAt-和setCharAt"><a href="#charAt-和setCharAt" class="headerlink" title="charAt()和setCharAt()"></a>charAt()和setCharAt()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">charAt(int n)方法用来获取参数n指定位置上的单个字符。字符串序列从0开始，即当前对象实体中n的值必须是非负的，并且小于当前对象实体中字符串的序列长度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment">setCharAt(int n,char ch)方法用来将当前StringBuffer对象实体中的字符对象位置n处的字符用参数ch指定的字符替换。n的值必须是非负的，并且小于当前对象实体中字符串序列的长度</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> ch)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">StringBuffer对象使用insert(int index,String str)方法将参数str指定的字符串插入到参数index的位置，并返回当前对象的引用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,String str)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">StringBuffer对象使用reverse()方法将该对象实体中的字符翻转，并返回当前对象的引用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">reverse</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h4 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">delete(int startIndex,int endIndex)该方法用于删除子字符串。参数startIndex指定需删除的第一个字符的下标，而endIndex指定了需删除的最后一个字符的下一个字符的下标。因此要删除的子字符串是从startIndex位置开始到endIndex-1的位置结束。deleteCharAt(int index)方法删除当前StringBuffer对象实体的字符串中在index位置的字符。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> startIndex,<span class="keyword">int</span> endIndex)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">replace(int startIndex,int endIndex,String str)方法将当前StringBuffer对象实体中的字符串的一个子字符串用参数str指定的字符串替换。被替换的子字符串由下标startIndex和endIndex指定，即从starIndex到endIndex-1的字符串被替换。该方法返回当前StringBuffer对象的引用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> startIndex,<span class="keyword">int</span> endIndex,String str)</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>记录第一次使用vscode</title>
    <url>/2020/03/19/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8vscode/</url>
    <content><![CDATA[<h1 id="记录第一次使用vscode"><a href="#记录第一次使用vscode" class="headerlink" title="记录第一次使用vscode"></a>记录第一次使用vscode</h1><p>今天闲来无聊，想起vscode这个软件，之前也下过很多次，但每次都不会使用，然后卸载了。今天想起它，经过一段深思冥想，查找资料，看别人的博客，阅读官方文档，终于学会使用了。</p>
<p>学会之后发现，这个软件巨好用，虽然它不是IDE，但它通过各种插件，效果比一般的IDE还要好，它小巧，即点即用；通过插件，支持多种语言的编写。</p>
]]></content>
      <categories>
        <category>日记</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2020/03/15/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。</p>
<a id="more"></a>

<h2 id="排序算法情况比较"><a href="#排序算法情况比较" class="headerlink" title="排序算法情况比较"></a>排序算法情况比较</h2><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/sort.png" alt="img"></p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/0B319B38-B70E-4118-B897-74EFA7E368F9.png" alt="img"></p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>两个数比较大小，较大的数下沉，较小的数冒起来。</p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul>
<li> 比较相邻的两个数据，如果第二个数小，就交换位置。 </li>
<li> 从后向前两两比较，一直到比较最前两个数据。最终最小数被交换到起始的位置，这样第一个最小数的位置就排好了。 </li>
<li> 继续重复上述过程，依次将第2.3...n-1个最小数排好位置。 </li>
</ul>


<p>执行图解如图</p>
<p><img src="https://pic.rmb.bdstatic.com/e1329ad44c28f4ac11fd2325b04f20fc4748.gif" alt="img"></p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>]=arr[j];</span><br><span class="line">                    arr[j]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>数据的顺序排好之后，冒泡算法仍然会继续进行下一轮比较，直到arr.length-1次，但后面的比较没有意义</p>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>设置标志位flag，如果发生了交换flag设置为true；如果没有交换就设置为false。<br>这样当一轮比较结束后如果flag仍为false，即：这一轮没有发生交换，说明数据的顺序已经排好，没有必要继续进行下去。</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>]=arr[j];</span><br><span class="line">                    arr[j]=temp;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断标志位是否为false，如果为false，说明后面的元素已经有序，就直接return</span></span><br><span class="line">            <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>在长度为N的无序数组中，第一次遍历n-1个数，找到最小的数值与第一个元素交换；<br>第二次遍历n-2个数，找到最小的数值与第二个元素交换；<br>。。。<br>第n-1次遍历，找到最小的数值与第n-1个元素交换，排序完成。</p>
<h3 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h3><p><img src="https://upload-images.jianshu.io/upload_images/7789414-5893f3ff1b915c38.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/811/format/webp" alt="img"></p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;<span class="comment">//记录最小值的位置</span></span><br><span class="line">            <span class="keyword">int</span> value = arr[i];<span class="comment">//记录最小值的值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[i] &amp;&amp; arr[j] &lt; value) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                    value = arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = arr[min];</span><br><span class="line">            arr[min] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h3><p>在要排序的一组数中，假定前n-1个数已经排好序，现在将第n个数插到前面的有序数列中，使得这n个数也是排好顺序的。如此反复循环，直到全部排好顺序。</p>
<h3 id="过程-2"><a href="#过程-2" class="headerlink" title="过程"></a>过程</h3><p><img src="https://upload-images.jianshu.io/upload_images/7789414-d3e7769cd797534d.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/811/format/webp" alt="img"></p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InsertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                    arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h3><p>在要排序的一组数中，根据某一增量分为若干子序列，并对子序列分别进行插入排序。<br>然后逐渐将增量减小,并重复上述过程。直至增量为1,此时数据序列基本有序,最后进行插入排序。</p>
<h3 id="过程-3"><a href="#过程-3" class="headerlink" title="过程"></a>过程</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/Sorting_shellsort_anim.gif" alt="img"></p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> gap = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">while</span>(gap&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; arr.length; i+=gap) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j-=gap) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (arr[j] &lt; arr[j - gap]) &#123;</span><br><span class="line">                        <span class="keyword">int</span> temp = arr[j - gap];</span><br><span class="line">                        arr[j - gap] = arr[j];</span><br><span class="line">                        arr[j] = temp;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            gap/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h4 id="基本思想-4"><a href="#基本思想-4" class="headerlink" title="基本思想"></a>基本思想</h4><ul>
<li> 先从数列中取出一个数作为key值； </li>
<li> 将比这个数小的数全部放在它的左边，大于或等于它的数全部放在它的右边；  </li>
<li> 对左右两个小数列重复第二步，直至各区间只有1个数。 </li>
</ul>

<h4 id="过程-4"><a href="#过程-4" class="headerlink" title="过程"></a>过程</h4><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif" alt="img"></p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FastSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(low&gt;high)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = low;</span><br><span class="line">        <span class="keyword">int</span> j = high;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[i];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; arr[j]&gt;=pivot)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; arr[i]&lt;=pivot)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = pivot;</span><br><span class="line">        FastSort(arr, low, i-<span class="number">1</span>);</span><br><span class="line">        FastSort(arr, i+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2>]]></content>
      <categories>
        <category>算法</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>java实现Fibonacci</title>
    <url>/2020/03/11/java%E5%AE%9E%E7%8E%B0Fibonacci/</url>
    <content><![CDATA[<h1 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>求斐波那契数列的第n项</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/45be9587-6069-4ab7-b9ac-840db1a53744.jpg" width="330px"> </div><br>

<a id="more"></a>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>如果使用递归求解，会重复计算一些子问题。例如，计算 f(4) 需要计算 f(3) 和 f(2)，计算 f(3) 需要计算 f(2) 和 f(1)，可以看到 f(2) 被重复计算了。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c13e2a3d-b01c-4a08-a69b-db2c4e821e09.png" width="350px"/> </div><br>

<p>递归是将一个问题划分成多个子问题求解，动态规划也是如此，但是动态规划会把子问题的解缓存起来，从而避免重复求解子问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span>[] fib = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    fib[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        fib[i] = fib[i - <span class="number">1</span>] + fib[i - <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> fib[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>考虑到第 i 项只与第 i-1 和第 i-2 项有关，因此只需要存储前两项的值就能求解第 i 项，从而将空间复杂度由 O(N) 降低为 O(1)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span> pre2 = <span class="number">0</span>, pre1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> fib = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fib = pre2 + pre1;</span><br><span class="line">        pre2 = pre1;</span><br><span class="line">        pre1 = fib;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于待求解的 n 小于 40，因此可以将前 40 项的结果先进行计算，之后就能以 O(1) 时间复杂度得到第 n 项的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] fib = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">40</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fib[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; fib.length; i++)</span><br><span class="line">            fib[i] = fib[i - <span class="number">1</span>] + fib[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fib[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="矩形覆盖"><a href="#矩形覆盖" class="headerlink" title="矩形覆盖"></a>矩形覆盖</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>我们可以用 2*1 的小矩形横着或者竖着去覆盖更大的矩形。请问用 n 个 2*1 的小矩形无重叠地覆盖一个 2*n 的大矩形，总共有多少种方法？</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b903fda8-07d0-46a7-91a7-e803892895cf.gif" width="100px"> </div><br>

<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>当 n 为 1 时，只有一种覆盖方法：</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f6e146f1-57ad-411b-beb3-770a142164ef.png" width="100px"> </div><br>

<p>当 n 为 2 时，有两种覆盖方法：</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/fb3b8f7a-4293-4a38-aae1-62284db979a3.png" width="200px"> </div><br>

<p>要覆盖 2*n 的大矩形，可以先覆盖 2*1 的矩形，再覆盖 2*(n-1) 的矩形；或者先覆盖 2*2 的矩形，再覆盖 2*(n-2) 的矩形。而覆盖 2*(n-1) 和 2*(n-2) 的矩形可以看成子问题。该问题的递推公式如下：</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/508c6e52-9f93-44ed-b6b9-e69050e14807.jpg" width="370px"> </div><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">RectCover</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span> pre2 = <span class="number">1</span>, pre1 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        result = pre2 + pre1;</span><br><span class="line">        pre2 = pre1;</span><br><span class="line">        pre1 = result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/9dae7475-934f-42e5-b3b3-12724337170a.png" width="380px"> </div><br>

<h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>当 n = 1 时，只有一种跳法：</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/72aac98a-d5df-4bfa-a71a-4bb16a87474c.png" width="250px"> </div><br>

<p>当 n = 2 时，有两种跳法：</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/1b80288d-1b35-4cd3-aa17-7e27ab9a2389.png" width="300px"> </div><br>

<p>跳 n 阶台阶，可以先跳 1 阶台阶，再跳 n-1 阶台阶；或者先跳 2 阶台阶，再跳 n-2 阶台阶。而 n-1 和 n-2 阶台阶的跳法可以看成子问题，该问题的递推公式为：</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/508c6e52-9f93-44ed-b6b9-e69050e14807.jpg" width="350px"> </div><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span> pre2 = <span class="number">1</span>, pre1 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        result = pre2 + pre1;</span><br><span class="line">        pre2 = pre1;</span><br><span class="line">        pre1 = result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>
<div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/cd411a94-3786-4c94-9e08-f28320e010d5.png" width="380px"> </div><br>

<h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target];</span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; target; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            dp[i] += dp[j];</span><br><span class="line">    <span class="keyword">return</span> dp[target - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h3><p>跳上 n-1 级台阶，可以从 n-2 级跳 1 级上去，也可以从 n-3 级跳 2 级上去…，那么</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(n-1) &#x3D; f(n-2) + f(n-3) + ... + f(0)</span><br></pre></td></tr></table></figure>

<p>同样，跳上 n 级台阶，可以从 n-1 级跳 1 级上去，也可以从 n-2 级跳 2 级上去… ，那么</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(n) &#x3D; f(n-1) + f(n-2) + ... + f(0)</span><br></pre></td></tr></table></figure>

<p>综上可得</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(n) - f(n-1) &#x3D; f(n-1)</span><br></pre></td></tr></table></figure>

<p>即</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(n) &#x3D; 2*f(n-1)</span><br></pre></td></tr></table></figure>

<p>所以 f(n) 是一个等比数列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int JumpFloorII(int target) &#123;</span><br><span class="line">    return (int) Math.pow(2, target - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python自学记录</title>
    <url>/2020/03/06/Python%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Python自学记录"><a href="#Python自学记录" class="headerlink" title="Python自学记录"></a>Python自学记录</h1><blockquote>
<p>学习来自:阿里云大学/通用技术 /Python /<strong>Python语言基础1：语法入门</strong><br><a href="https://edu.aliyun.com/course/1780?spm=5176.10731542.0.0.1843298528zKjV" target="_blank" rel="noopener">网站链接</a>.</p>
</blockquote>
<a id="more"></a>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>​        数据类型指的就是值的类型，也就是可以为变量赋哪些值</p>
<h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line">在Python中，数值分为整数，浮点数(小数)，复数</span><br><span class="line">在Python中所有的整数都是int型</span><br><span class="line">在Python中所有的小数都是float型</span><br><span class="line">Python中的整数的大小没有限制，可以是一个无限大的整数</span><br><span class="line">如果数字过大可以使用下划线作为分隔符</span><br></pre></td></tr></table></figure>

<p>​        十进制的数不能以0开头</p>
<p>​        二进制以0b开头</p>
<p>​        八进制以0o开头</p>
<p>​        十六进制以0x开头</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line">字符串用来表示一段文本信息，字符串是程序中使用最多的数据类型</span><br><span class="line">在Python中字符串需要引号引起来，不使用不是字符串</span><br><span class="line">引号可以是单引号也可以是双引号</span><br><span class="line">相同的引号不能嵌套使用</span><br><span class="line">长字符串的引号不能跨行使用(引号只会在本行找另一个引号)，但可以用反斜杠&quot;\&quot;切割片段(此方法不会保留引号中字符串的格式)</span><br><span class="line">可以使用三重引号来表示一个长字符串，三重引号可以换行，并且会保留字符串中的格式</span><br><span class="line">可以使用反斜杠“\”转义字符</span><br><span class="line">	\uxxxx</span><br><span class="line"> 	\&#39;和\&quot;</span><br><span class="line"> 	\t 制表符(Tab键)</span><br><span class="line"> 	\n 换行</span><br></pre></td></tr></table></figure>



<h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">字符串之间也可以进行加法运算</span><br><span class="line">如果将两个字符串进行相加，则会自动将两个字符串拼接为一个</span><br><span class="line">字符串不能和其他的类型进行加法运算，如果做了会出现异常 TypeError: must be str, not int</span><br><span class="line">在创建字符串时，可以在字符串中指定占位符：</span><br><span class="line">	%s 在字符串中表示任意字符</span><br><span class="line">	%f 浮点数占位符</span><br><span class="line">	%d 整数占位符</span><br><span class="line">格式化字符串，可以通过在字符串前添加一个f来创建一个格式化字符串，在格式化字符串中可以直接嵌入变量</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下全为例子</span></span><br><span class="line">a = <span class="string">'hello'</span></span><br><span class="line">a = <span class="string">'abc'</span> + <span class="string">'haha'</span> + <span class="string">'哈哈'</span></span><br><span class="line">print(<span class="string">'a ='</span>,a)</span><br><span class="line">b = <span class="string">'Hello %s'</span>%<span class="string">'孙悟空'</span></span><br><span class="line">b = <span class="string">'hello %s 你好 %s'</span>%(<span class="string">'tom'</span>,<span class="string">'孙悟空'</span>)</span><br><span class="line">b = <span class="string">'hello %3.5s'</span>%<span class="string">'abcdefg'</span> <span class="comment"># %3.5s字符串的长度限制在3-5之间</span></span><br><span class="line">b = <span class="string">'hello %s'</span>%<span class="number">123.456</span></span><br><span class="line">b = <span class="string">'hello %.2f'</span>%<span class="number">123.456</span></span><br><span class="line">b = <span class="string">'hello %d'</span>%<span class="number">123.95</span></span><br><span class="line">b = <span class="string">'呵呵'</span></span><br><span class="line">print(<span class="string">'a = %s'</span>%a)</span><br><span class="line">c = <span class="string">f'hello <span class="subst">&#123;a&#125;</span> <span class="subst">&#123;b&#125;</span>'</span></span><br><span class="line">print(<span class="string">f'a = <span class="subst">&#123;a&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 笔记 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个变量来保存你的名字</span></span><br><span class="line">name = <span class="string">'孙悟空'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用四种方式来输出，欢迎 xxx 光临</span></span><br><span class="line"><span class="comment"># 拼串</span></span><br><span class="line">print(<span class="string">'欢迎 '</span>+name+<span class="string">' 光临！'</span>)</span><br><span class="line"><span class="comment"># 多个参数</span></span><br><span class="line">print(<span class="string">'欢迎'</span>,name,<span class="string">'光临！'</span>)</span><br><span class="line"><span class="comment"># 占位符</span></span><br><span class="line">print(<span class="string">'欢迎 %s 光临！'</span>%name)</span><br><span class="line"><span class="comment"># 格式化字符串</span></span><br><span class="line">print(<span class="string">f'欢迎 <span class="subst">&#123;name&#125;</span> 光临！'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="字符串复制"><a href="#字符串复制" class="headerlink" title="字符串复制"></a>字符串复制</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">将字符串和数字相乘</span><br><span class="line">“*” 在语言中表示乘法</span><br><span class="line">“*” 如果将字符串和数字相乘，则解释器会将字符串重复指定的次数并返回</span><br></pre></td></tr></table></figure>



<h4 id="布尔值与空值"><a href="#布尔值与空值" class="headerlink" title="布尔值与空值"></a>布尔值与空值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">布尔值（bool），布尔值主要用来做逻辑判断，布尔值一共有两个 True 和 False，True表示真 False表示假</span><br><span class="line">None（空值），None专门用来表示不存在</span><br></pre></td></tr></table></figure>



<h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">通过类型检查，可以检查只能值（变量）的类型</span><br><span class="line">type()用来检查值的类型</span><br><span class="line">该函数会将检查的结果作为返回值返回，可以通过变量来接收函数的返回值</span><br></pre></td></tr></table></figure>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">123</span> <span class="comment"># 数值</span></span><br><span class="line">b = <span class="string">'123'</span> <span class="comment"># 字符串</span></span><br><span class="line">c = type(<span class="string">'123'</span>)</span><br><span class="line">c = type(a)</span><br><span class="line"><span class="comment"># print(type(b))</span></span><br><span class="line">print(type(<span class="number">1</span>)) <span class="comment"># &lt;class 'int'&gt;</span></span><br><span class="line">print(type(<span class="number">1.5</span>)) <span class="comment"># &lt;class 'float'&gt;</span></span><br><span class="line">print(type(<span class="literal">True</span>)) <span class="comment"># &lt;class 'bool'&gt;</span></span><br><span class="line">print(type(<span class="string">'hello'</span>))  <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(type(<span class="literal">None</span>)) <span class="comment"># &lt;class 'NoneType'&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">python是一门面向对象(object)的编程语言</span><br><span class="line">一切皆对象</span><br><span class="line">程序运行中，所有的数据都是存储到内存中然后再运行的，对象就是内存中专门用来存储指定数据的一块区域，对象实际上就是一个容器，专门用来存储数据</span><br></pre></td></tr></table></figure>



<h4 id="对象结构"><a href="#对象结构" class="headerlink" title="对象结构"></a>对象结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">每个对象都要保存三种数据类型：</span><br><span class="line">	- id（标识）</span><br><span class="line">		&gt;id用来识别对象的唯一性，每一个对象都有一个唯一的id</span><br><span class="line">		&gt;对象的id就相当与人的身份证一样</span><br><span class="line">		&gt;可以通过id函数来查看对象的id</span><br><span class="line">		&gt;id是由解释器产生，在CPython中，id就是对象的内存地址</span><br><span class="line">		&gt;对象一旦创建，则它的id永远不能改变</span><br><span class="line"></span><br><span class="line">	- type（类型）</span><br><span class="line">		&gt;类型用来标识当前对象所属类型</span><br><span class="line">		&gt;比如 int str float bool</span><br><span class="line">		&gt;类型决定了对象有哪些功能</span><br><span class="line">		&gt;通过type()函数来查看对象的类型</span><br><span class="line">		&gt;Python是一门强类型语言，对象一旦创建类型便不能修改</span><br><span class="line"></span><br><span class="line">	-value（值）</span><br><span class="line">		&gt;值就是对象中存储的具体的数据</span><br><span class="line">		&gt;对于有些对象值是可以改变的</span><br><span class="line">		&gt;对象分为两大类，可变对象，不可变对象</span><br><span class="line">			可变对象的值可以改变</span><br><span class="line">			不可变对象的值不可改变</span><br></pre></td></tr></table></figure>




<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line"> - 运算符可以对一个值或多个值进行运算或各种操作</span><br><span class="line"> - 比如 + 、-、&#x3D; 都属于运算符</span><br><span class="line"> - 运算符的分类：</span><br><span class="line">    1.算术运算符</span><br><span class="line">    2.赋值运算符</span><br><span class="line">    3.比较运算符（关系运算符）</span><br><span class="line">    4.逻辑运算符</span><br><span class="line">    5.条件运算符（三元运算符）</span><br></pre></td></tr></table></figure>



<h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line"> + 加法运算符（如果是两个字符串之间进行加法运算，则会进行拼串操作）</span><br><span class="line"> - 减法运算符</span><br><span class="line"> * 乘法运算符（如果将字符串和数字相乘，则会对字符串进行复制操作，将字符串重复指定次数）</span><br><span class="line"> &#x2F; 除法运算符，运算时结果总会返回一个浮点类型</span><br><span class="line"> &#x2F;&#x2F; 整除，只会保留计算后的整数位，总会返回一个整型</span><br><span class="line"> ** 幂运算，求一个值的几次幂</span><br><span class="line"> % 取模，求两个数相除的余数</span><br></pre></td></tr></table></figure>



<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">&#x3D; 可以将等号右侧的值赋值给等号左侧的变量</span><br><span class="line">+&#x3D; a +&#x3D; 5 相当于 a &#x3D; a + 5</span><br><span class="line">-&#x3D; a -&#x3D; 5 相当于 a &#x3D; a - 5</span><br><span class="line">&#x3D; a *&#x3D; 5 相当于 a &#x3D; a * 5</span><br><span class="line">*&#x3D; a *&#x3D; 5 相当于 a &#x3D; a * 5</span><br><span class="line">&#x2F;&#x3D; a &#x2F;&#x3D; 5 相当于 a &#x3D; a &#x2F; 5</span><br><span class="line">&#x2F;&#x2F;&#x3D; a &#x2F;&#x2F;&#x3D; 5 相当于 a &#x3D; a &#x2F;&#x2F; 5</span><br><span class="line">%&#x3D; a %&#x3D; 5 相当于 a &#x3D; a % 5</span><br></pre></td></tr></table></figure>



<h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line"> 关系运算符用来比较两个值之间的关系，总会返回一个布尔值</span><br><span class="line"> 如果关系成立，返回True，否则返回False</span><br><span class="line"> &gt; 比较左侧值是否大于右侧值</span><br><span class="line"> &gt;&#x3D; 比较左侧的值是否大于或等于右侧的值</span><br><span class="line"> &lt; 比较左侧值是否小于右侧值</span><br><span class="line"> &lt;&#x3D; 比较左侧的值是否小于或等于右侧的值</span><br><span class="line"> &#x3D;&#x3D; 比较两个对象的值是否相等</span><br><span class="line"> !&#x3D; 比较两个对象的值是否不相等</span><br><span class="line">   相等和不等比较的是对象的值，而不是id</span><br><span class="line"> is 比较两个对象是否是同一个对象，比较的是对象的id</span><br><span class="line"> is not 比较两个对象是否不是同一个对象，比较的是对象的id</span><br></pre></td></tr></table></figure>




<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line"> 逻辑运算符主要用来做一些逻辑判断</span><br><span class="line"> not 逻辑非</span><br><span class="line">   not可以对符号右侧的值进行非运算</span><br><span class="line">       对于布尔值，非运算会对其进行取反操作，True变False，False变True</span><br><span class="line">       对于非布尔值，非运算会先将其转换为布尔值，然后再取反</span><br><span class="line">       </span><br><span class="line"> and 逻辑与</span><br><span class="line">   and可以对符号两侧的值进行与运算</span><br><span class="line">    只有在符号两侧的值都为True时，才会返回True，只要有一个False就返回False</span><br><span class="line">    与运算是找False的</span><br><span class="line">    Python中的与运算是短路的与，如果第一个值为False，则不再看第二个值</span><br><span class="line">   </span><br><span class="line"> or 逻辑或</span><br><span class="line">   or 可以对符号两侧的值进行或运算</span><br><span class="line">    或运算两个值中只要有一个True，就会返回True</span><br><span class="line">    或运算是找True的</span><br><span class="line">    Python中的或运算是短路的或，如果第一个值为True，则不再看第二个值</span><br></pre></td></tr></table></figure>




<h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line"> 语法： 语句1 if 条件表达式 else 语句2</span><br><span class="line"> 执行流程：</span><br><span class="line">   条件运算符在执行时，会先对条件表达式进行求值判断</span><br><span class="line">       如果判断结果为True，则执行语句1，并返回执行结果</span><br><span class="line">       如果判断结果为False，则执行语句2，并返回执行结果</span><br></pre></td></tr></table></figure>



<h2 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">- 列表是Python中的一个对象</span><br><span class="line">- 对象（object）就是内存中专门用来存储数据的一块区域</span><br><span class="line">- 之前我们学习的对象，像数值，它只能保存一个单一的数据</span><br><span class="line">- 列表中可以保存多个有序的数据</span><br><span class="line">- 列表是用来存储对象的对象</span><br><span class="line">- 列表的使用：</span><br><span class="line">    1.列表的创建</span><br><span class="line">    2.操作列表中的数据</span><br></pre></td></tr></table></figure>

<p>列表的创建:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建列表，通过[]来创建列表</span></span><br><span class="line">my_list = [] <span class="comment"># 创建了一个空列表</span></span><br><span class="line">print(my_list , type(my_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表存储的数据，我们称为元素</span></span><br><span class="line"><span class="comment"># 一个列表中可以存储多个元素，也可以在创建列表时，来指定列表中的元素</span></span><br><span class="line">my_list = [<span class="number">10</span>] <span class="comment"># 创建一个只包含一个元素的列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当向列表中添加多个元素时，多个元素之间使用,隔开</span></span><br><span class="line">my_list = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>] <span class="comment"># 创建了一个保护有5个元素的列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表中可以保存任意的对象</span></span><br><span class="line">my_list = [<span class="number">10</span>,<span class="string">'hello'</span>,<span class="literal">True</span>,<span class="literal">None</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="keyword">print</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表中的对象都会按照插入的顺序存储到列表中，</span></span><br><span class="line"><span class="comment">#   第一个插入的对象保存到第一个位置，第二个保存到第二个位置</span></span><br><span class="line"><span class="comment"># 我们可以通过索引（index）来获取列表中的元素</span></span><br><span class="line"><span class="comment">#   索引是元素在列表中的位置，列表中的每一个元素都有一个索引</span></span><br><span class="line"><span class="comment">#   索引是从0开始的整数，列表第一个位置索引为0，第二个位置索引为1，第三个位置索引为2，以此类推</span></span><br><span class="line">my_list = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引获取列表中的元素</span></span><br><span class="line"><span class="comment"># 语法：my_list[索引] my_list[0]</span></span><br><span class="line">print(my_list[<span class="number">4</span>])</span><br><span class="line"><span class="comment"># 如果使用的索引超过了最大的范围，会抛出异常</span></span><br><span class="line">print(my_list[<span class="number">5</span>]) IndexError: list index out of range</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取列表的长度，列表中元素的个数</span></span><br><span class="line"><span class="comment"># len()函数，通过该函数可以获取列表的长度</span></span><br><span class="line"><span class="comment"># 获取到的长度的值，是列表的最大索引 + 1</span></span><br><span class="line">print(len(my_list)) <span class="comment"># 5</span></span><br></pre></td></tr></table></figure>

<h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><blockquote>
<p>左闭右开</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line"><span class="comment"># 切片指从现有列表中，获取一个子列表</span></span><br><span class="line"><span class="comment"># 创建一个列表，一般创建列表时，变量的名字会使用复数</span></span><br><span class="line">stus = [<span class="string">'孙悟空'</span>,<span class="string">'猪八戒'</span>,<span class="string">'沙和尚'</span>,<span class="string">'唐僧'</span>,<span class="string">'蜘蛛精'</span>,<span class="string">'白骨精'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的索引可以是负数</span></span><br><span class="line"><span class="comment"># 如果索引是负数，则从后向前获取元素，-1表示倒数第一个，-2表示倒数第二个 以此类推</span></span><br><span class="line">print(stus[<span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过切片来获取指定的元素</span></span><br><span class="line"><span class="comment"># 语法：列表[起始:结束] </span></span><br><span class="line"><span class="comment">#   通过切片获取元素时，会包括起始位置的元素，不会包括结束位置的元素</span></span><br><span class="line"><span class="comment">#   做切片操作时，总会返回一个新的列表，不会影响原来的列表</span></span><br><span class="line"><span class="comment">#   起始和结束位置的索引都可以省略不写</span></span><br><span class="line"><span class="comment">#   如果省略结束位置，则会一直截取到最后</span></span><br><span class="line"><span class="comment">#   如果省略起始位置，则会从第一个元素开始截取</span></span><br><span class="line"><span class="comment">#   如果起始位置和结束位置全部省略，则相当于创建了一个列表的副本</span></span><br><span class="line">print(stus[<span class="number">1</span>:])</span><br><span class="line">print(stus[:<span class="number">3</span>])</span><br><span class="line">print(stus[:])</span><br><span class="line">print(stus)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法：列表[起始:结束:步长] </span></span><br><span class="line"><span class="comment"># 步长表示，每次获取元素的间隔，默认值是1</span></span><br><span class="line">print(stus[<span class="number">0</span>:<span class="number">5</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 步长不能是0，但是可以是负数</span></span><br><span class="line">print(stus[::<span class="number">0</span>]) ValueError: slice step cannot be zero</span><br><span class="line"><span class="comment"># 如果是负数，则会从列表的后部向前边取元素</span></span><br><span class="line">print(stus[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>


<h4 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">+ 和 *</span><br><span class="line">in 和 not in</span><br><span class="line">len()</span><br><span class="line">min() 和 max()</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># + 和 *</span></span><br><span class="line"><span class="comment"># +可以将两个列表拼接为一个列表</span></span><br><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] + [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># * 可以将列表重复指定的次数</span></span><br><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] * <span class="number">5</span></span><br><span class="line"></span><br><span class="line">print(my_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个列表</span></span><br><span class="line">stus = [<span class="string">'孙悟空'</span>,<span class="string">'猪八戒'</span>,<span class="string">'沙和尚'</span>,<span class="string">'唐僧'</span>,<span class="string">'蜘蛛精'</span>,<span class="string">'白骨精'</span>,<span class="string">'沙和尚'</span>,<span class="string">'沙和尚'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># in 和 not in</span></span><br><span class="line"><span class="comment"># in用来检查指定元素是否存在于列表中</span></span><br><span class="line"><span class="comment">#   如果存在，返回True，否则返回False</span></span><br><span class="line"><span class="comment"># not in用来检查指定元素是否不在列表中</span></span><br><span class="line"><span class="comment">#   如果不在，返回True，否则返回False</span></span><br><span class="line">print(<span class="string">'牛魔王'</span> <span class="keyword">not</span> <span class="keyword">in</span> stus)</span><br><span class="line">print(<span class="string">'牛魔王'</span> <span class="keyword">in</span> stus)</span><br><span class="line"></span><br><span class="line"><span class="comment"># len()获取列表中的元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># min() 获取列表中的最小值</span></span><br><span class="line"><span class="comment"># max() 获取列表中的最大值</span></span><br><span class="line">arr = [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">100</span>,<span class="number">77</span>]</span><br><span class="line">print(min(arr) , max(arr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个方法（method），方法和函数基本上是一样，只不过方法必须通过 对象.方法() 的形式调用</span></span><br><span class="line"><span class="comment"># xxx.print() 方法实际上就是和对象关系紧密的函数</span></span><br><span class="line"><span class="comment"># s.index() 获取指定元素在列表中的第一次出现时索引</span></span><br><span class="line">print(stus.index(<span class="string">'沙和尚'</span>))</span><br><span class="line"><span class="comment"># index()的第二个参数，表示查找的起始位置 ， 第三个参数，表示查找的结束位置</span></span><br><span class="line">print(stus.index(<span class="string">'沙和尚'</span>,<span class="number">3</span>,<span class="number">7</span>))</span><br><span class="line"><span class="comment"># 如果要获取列表中没有的元素，会抛出异常</span></span><br><span class="line">print(stus.index(<span class="string">'牛魔王'</span>)) ValueError: <span class="string">'牛魔王'</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> list</span><br><span class="line"><span class="comment"># s.count() 统计指定元素在列表中出现的次数</span></span><br><span class="line">print(stus.count(<span class="string">'牛魔王'</span>))</span><br></pre></td></tr></table></figure>

<h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">- 序列是Python中最基本的一种数据结构</span><br><span class="line">- 数据结构指计算机中数据存储的方式</span><br><span class="line">- 序列用于保存一组有序的数据，所有的数据在序列当中都有一个唯一的位置（索引）</span><br><span class="line">    并且序列中的数据会按照添加的顺序来分配索引</span><br><span class="line">- 序列的分类：</span><br><span class="line">    可变序列（序列中的元素可以改变）：</span><br><span class="line">        &gt; 列表（list）</span><br><span class="line">    不可变序列（序列中的元素不能改变）：</span><br><span class="line">        &gt; 字符串（str）    </span><br><span class="line">        &gt; 元组（tuple）</span><br></pre></td></tr></table></figure>



<h4 id="修改列表"><a href="#修改列表" class="headerlink" title="修改列表"></a>修改列表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个列表</span></span><br><span class="line">stus = [<span class="string">'孙悟空'</span>,<span class="string">'猪八戒'</span>,<span class="string">'沙和尚'</span>,<span class="string">'唐僧'</span>,<span class="string">'蜘蛛精'</span>,<span class="string">'白骨精'</span>]</span><br><span class="line"><span class="comment"># 修改列表中的元素</span></span><br><span class="line"><span class="comment"># 直接通过索引来修改元素</span></span><br><span class="line">stus[<span class="number">0</span>] = <span class="string">'sunwukong'</span></span><br><span class="line">stus[<span class="number">2</span>] = <span class="string">'哈哈'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过del来删除元素</span></span><br><span class="line"><span class="keyword">del</span> stus[<span class="number">2</span>] <span class="comment"># 删除索引为2的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过切片来修改列表</span></span><br><span class="line"><span class="comment"># 在给切片进行赋值时，只能使用序列</span></span><br><span class="line">stus[<span class="number">0</span>:<span class="number">2</span>] = [<span class="string">'牛魔王'</span>,<span class="string">'红孩儿'</span>] <span class="comment"># 使用新的元素替换旧元素</span></span><br><span class="line">stus[<span class="number">0</span>:<span class="number">2</span>] = [<span class="string">'牛魔王'</span>,<span class="string">'红孩儿'</span>,<span class="string">'二郎神'</span>] <span class="comment"># 这种修改方法可以传多个</span></span><br><span class="line">stus[<span class="number">0</span>:<span class="number">0</span>] = [<span class="string">'牛魔王'</span>] <span class="comment"># 向索引为0的位置插入元素</span></span><br><span class="line"><span class="comment"># 当设置了步长时，序列中元素的个数必须和切片中元素的个数一致</span></span><br><span class="line">stus[::<span class="number">2</span>] = [<span class="string">'牛魔王'</span>,<span class="string">'红孩儿'</span>,<span class="string">'二郎神'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过切片来删除元素</span></span><br><span class="line"><span class="comment"># del stus[0:2]</span></span><br><span class="line"><span class="comment"># del stus[::2]</span></span><br><span class="line"><span class="comment"># stus[1:3] = []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print('修改后：',stus)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上操作，只适用于可变序列</span></span><br><span class="line">s = <span class="string">'hello'</span> <span class="comment"># 字符串，不可变序列</span></span><br><span class="line"><span class="comment"># s[1] = 'a' 不可变序列，无法通过索引来修改</span></span><br><span class="line"><span class="comment"># 可以通过 list() 函数将其他的序列转换为list</span></span><br><span class="line">s = list(s)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>

<h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">range()是一个函数，可以用来生成一个自然数的序列</span><br><span class="line"># 该函数需要三个参数</span><br><span class="line">#   1.起始位置（可以省略，默认是0）</span><br><span class="line">#   2.结束位置</span><br><span class="line">#   3.步长（可以省略，默认是1）</span><br><span class="line"># 通过range()可以创建一个执行指定次数的for循环</span><br><span class="line"># for()循环除了创建方式以外，其余的都和while一样，</span><br><span class="line">#   包括else、包括break continue都可以在for循环中使用</span><br><span class="line">#   并且for循环使用也更加简单</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line">r = range(<span class="number">5</span>) <span class="comment"># 生成一个这样的序列[0,1,2,3,4]</span></span><br><span class="line">r = range(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">r = range(<span class="number">10</span>,<span class="number">0</span>,<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="string">'hello'</span>:</span><br><span class="line">    print(s)</span><br></pre></td></tr></table></figure>

<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">元组是一个不可变的序列</span><br><span class="line">它的操作的方式基本上和列表是一致的</span><br><span class="line">所以在操作元组时，就把元组当成是一个不可变的列表就ok了</span><br><span class="line">一般当我们希望数据不改变时，就使用元组，其余情况都使用列表</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建元组</span></span><br><span class="line"><span class="comment"># 使用()来创建元组</span></span><br><span class="line">my_tuple = () <span class="comment"># 创建了一个空元组</span></span><br><span class="line"><span class="comment"># print(my_tuple,type(my_tuple)) # &lt;class 'tuple'&gt;</span></span><br><span class="line"></span><br><span class="line">my_tuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment"># 创建了一个5个元素的元组</span></span><br><span class="line"><span class="comment"># 元组是不可变对象，不能尝试为元组中的元素重新赋值</span></span><br><span class="line"><span class="comment"># my_tuple[3] = 10 TypeError: 'tuple' object does not support item assignment</span></span><br><span class="line"><span class="comment"># print(my_tuple[3])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当元组不是空元组时，括号可以省略</span></span><br><span class="line"><span class="comment"># 如果元组不是空元组，它里边至少要有一个,</span></span><br><span class="line">my_tuple = <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span></span><br><span class="line">my_tuple = <span class="number">40</span>,</span><br><span class="line"><span class="comment"># print(my_tuple , type(my_tuple))</span></span><br><span class="line"></span><br><span class="line">my_tuple = <span class="number">10</span> , <span class="number">20</span> , <span class="number">30</span> , <span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组的解包（解构）</span></span><br><span class="line"><span class="comment"># 解包指就是将元组当中每一个元素都赋值给一个变量</span></span><br><span class="line">a,b,c,d = my_tuple</span><br><span class="line"></span><br><span class="line"><span class="comment"># print("a =",a)</span></span><br><span class="line"><span class="comment"># print("b =",b)</span></span><br><span class="line"><span class="comment"># print("c =",c)</span></span><br><span class="line"><span class="comment"># print("d =",d)</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">300</span></span><br><span class="line"><span class="comment"># print(a , b)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互a 和 b的值，这时我们就可以利用元组的解包</span></span><br><span class="line">a , b = b , a</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(a , b)</span></span><br><span class="line">my_tuple = <span class="number">10</span> , <span class="number">20</span> , <span class="number">30</span> , <span class="number">40</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在对一个元组进行解包时，变量的数量必须和元组中的元素的数量一致</span></span><br><span class="line"><span class="comment"># 也可以在变量前边添加一个*，这样变量将会获取元组中所有剩余的元素</span></span><br><span class="line">a , b , *c = my_tuple</span><br><span class="line">a , *b , c = my_tuple</span><br><span class="line">*a , b , c = my_tuple</span><br><span class="line">a , b , *c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">a , b , *c = <span class="string">'hello world'</span></span><br><span class="line"><span class="comment"># 不能同时出现两个或以上的*变量</span></span><br><span class="line"><span class="comment"># *a , *b , c = my_tuple SyntaxError: two starred expressions in assignment</span></span><br><span class="line">print(<span class="string">'a ='</span>,a)</span><br><span class="line">print(<span class="string">'b ='</span>,b)</span><br><span class="line">print(<span class="string">'c ='</span>,c)</span><br></pre></td></tr></table></figure>

<h4 id="可变对象"><a href="#可变对象" class="headerlink" title="可变对象"></a>可变对象</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">可变对象是指对象的值可变</span><br><span class="line"></span><br><span class="line">- 每个对象中都保存了三个数据：</span><br><span class="line">    id（标识）</span><br><span class="line">    type（类型）</span><br><span class="line">    value（值）    </span><br><span class="line"></span><br><span class="line">- 列表就是一个可变对象</span><br><span class="line">    a &#x3D; [1,2,3]</span><br><span class="line"></span><br><span class="line">- a[0] &#x3D; 10 （改对象）</span><br><span class="line">    - 这个操作是在通过变量去修改对象的值</span><br><span class="line">    - 这种操作不会改变变量所指向的对象    </span><br><span class="line">    - 当我们去修改对象时，如果有其他变量也指向了该对象，则修改也会在其他的变量中体现</span><br><span class="line"></span><br><span class="line">- a &#x3D; [4,5,6] （改变量）</span><br><span class="line">    - 这个操作是在给变量重新赋值</span><br><span class="line">    - 这种操作会改变变量所指向的对象</span><br><span class="line">    - 为一个变量重新赋值时，不会影响其他的变量</span><br><span class="line"></span><br><span class="line">- 一般只有在为变量赋值时才是修改变量，其余的都是修改对象</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变对象</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(<span class="string">'修改前：'</span>, a , id(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引修改列表`在这里插入代码片`</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">print(<span class="string">'修改后：'</span>, a , id(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为变量重新赋值</span></span><br><span class="line">a = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">print(<span class="string">'修改后：'</span>, a , id(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = a  <span class="comment"># a,b指向的同一个对象，即a，b的id一样</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">10</span> <span class="comment"># 通过改对象b，所有指向该对象的变量的值都变了</span></span><br><span class="line"><span class="comment"># b = [10,2,3] # 通过改变量b，b所指向的对象不一样了，修改b，a不会变</span></span><br><span class="line">print(<span class="string">"a"</span>,a,id(a))</span><br><span class="line">print(<span class="string">"b"</span>,b,id(b))</span><br></pre></td></tr></table></figure>

<h4 id="与-is"><a href="#与-is" class="headerlink" title="== 与 is"></a>== 与 is</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line"> &#x3D;&#x3D;  !&#x3D;   is  is not</span><br><span class="line"> &#x3D;&#x3D;  !&#x3D; 比较的是对象的值是否相等 </span><br><span class="line"> is  is not 比较的是对象的id是否相等（比较两个对象是否是同一个对象）</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(a,b)</span><br><span class="line">print(id(a),id(b))</span><br><span class="line">print(a == b) <span class="comment"># a和b的值相等，使用==会返回True</span></span><br><span class="line">print(a <span class="keyword">is</span> b) <span class="comment"># a和b不是同一个对象，内存地址不同，使用is会返回False</span></span><br></pre></td></tr></table></figure>


<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">- 字典属于一种新的数据结构，称为映射（mapping）</span><br><span class="line">- 字典的作用和列表类似，都是用来存储对象的容器</span><br><span class="line">- 列表存储数据的性能很好，但是查询数据的性能的很差</span><br><span class="line">- 在字典中每一个元素都有一个唯一的名字，通过这个唯一的名字可以快速的查找到指定的元素</span><br><span class="line">- 在查询元素时，字典的效率是非常快的</span><br><span class="line">- 在字典中可以保存多个对象，每个对象都会有一个唯一的名字</span><br><span class="line">    这个唯一的名字，我们称其为键（key），通过key可以快速的查询value</span><br><span class="line">    这个对象，我们称其为值（value）</span><br><span class="line">    所以字典，我们也称为叫做键值对（key-value）结构</span><br><span class="line">    每个字典中都可以有多个键值对，而每一个键值对我们称其为一项（item）</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="comment"># 使用 &#123;&#125; 来创建字典</span></span><br><span class="line">d = &#123;&#125; <span class="comment"># 创建了一个空字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个保护有数据的字典</span></span><br><span class="line"><span class="comment"># 语法：</span></span><br><span class="line"><span class="comment">#   &#123;key:value,key:value,key:value&#125;</span></span><br><span class="line"><span class="comment">#   字典的值可以是任意对象</span></span><br><span class="line"><span class="comment">#   字典的键可以是任意的不可变对象（int、str、bool、tuple ...），但是一般我们都会使用str</span></span><br><span class="line"><span class="comment">#       字典的键是不能重复的，如果出现重复的后边的会替换到前边的</span></span><br><span class="line"><span class="comment"># d = &#123;'name':'孙悟空' , 'age':18 , 'gender':'男' , 'name':'sunwukong'&#125;</span></span><br><span class="line">d = &#123;</span><br><span class="line"><span class="string">'name'</span>:<span class="string">'孙悟空'</span> , </span><br><span class="line"><span class="string">'age'</span>:<span class="number">18</span> , </span><br><span class="line"><span class="string">'gender'</span>:<span class="string">'男'</span> , </span><br><span class="line"><span class="string">'name'</span>:<span class="string">'sunwukong'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(d , type(d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要根据键来获取值</span></span><br><span class="line">print(d[<span class="string">'name'</span>],d[<span class="string">'age'</span>],d[<span class="string">'gender'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用了字典中不存在的键，会报错</span></span><br><span class="line">print(d[<span class="string">'hello'</span>]) KeyError: <span class="string">'hello'</span></span><br></pre></td></tr></table></figure>

<h4 id="字典的使用"><a href="#字典的使用" class="headerlink" title="字典的使用"></a>字典的使用</h4><p>创建字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建字典</span></span><br><span class="line"><span class="comment"># 使用&#123;&#125;</span></span><br><span class="line"><span class="comment"># 语法：&#123;k1:v1,k2:v2,k3:v3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 dict()函数来创建字典</span></span><br><span class="line"><span class="comment"># 每一个参数都是一个键值对，参数名就是键，参数名就是值（这种方式创建的字典，key都是字符串）</span></span><br><span class="line">d = dict(name=<span class="string">'孙悟空'</span>,age=<span class="number">18</span>,gender=<span class="string">'男'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以将一个包含有双值子序列的序列转换为字典</span></span><br><span class="line"><span class="comment"># 双值序列，序列中只有两个值，[1,2] ('a',3) 'ab'</span></span><br><span class="line"><span class="comment"># 子序列，如果序列中的元素也是序列，那么我们就称这个元素为子序列</span></span><br><span class="line"><span class="comment"># [(1,2),(3,5)]</span></span><br><span class="line">d = dict([(<span class="string">'name'</span>,<span class="string">'孙悟饭'</span>),(<span class="string">'age'</span>,<span class="number">18</span>)])</span><br><span class="line"><span class="comment"># print(d , type(d))</span></span><br><span class="line">d = dict(name=<span class="string">'孙悟空'</span>,age=<span class="number">18</span>,gender=<span class="string">'男'</span>)</span><br></pre></td></tr></table></figure>

<p>len(): 获取字典中键值对的个数<br>in 和 not in : 检查字典中是否包含(不包含)指定的键<br>d[key] : 获取字典中的值，根据键来获取值<br>get(key[, default]) : 该方法用来根据键来获取字典中的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># len() 获取字典中键值对的个数</span></span><br><span class="line">print(len(d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># in 检查字典中是否包含指定的键</span></span><br><span class="line"><span class="comment"># not in 检查字典中是否不包含指定的键</span></span><br><span class="line">print(<span class="string">'hello'</span> <span class="keyword">in</span> d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中的值，根据键来获取值</span></span><br><span class="line"><span class="comment"># 语法：d[key]</span></span><br><span class="line">print(d[<span class="string">'age'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 'name'</span></span><br><span class="line">print(d[n])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过[]来获取值时，如果键不存在，会抛出异常 KeyError</span></span><br><span class="line"><span class="comment"># get(key[, default]) 该方法用来根据键来获取字典中的值</span></span><br><span class="line"><span class="comment">#   如果获取的键在字典中不存在，会返回None</span></span><br><span class="line"><span class="comment">#   也可以指定一个默认值，来作为第二个参数，这样获取不到值时将会返回默认值</span></span><br><span class="line">print(d.get(<span class="string">'name'</span>))</span><br><span class="line">print(d.get(<span class="string">'hello'</span>,<span class="string">'默认值'</span>))</span><br></pre></td></tr></table></figure>
<p>修改字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改字典</span></span><br><span class="line"><span class="comment"># d[key] = value 如果key存在则覆盖，不存在则添加</span></span><br><span class="line">d[<span class="string">'name'</span>] = <span class="string">'sunwukong'</span> <span class="comment"># 修改字典的key-value</span></span><br><span class="line">d[<span class="string">'address'</span>] = <span class="string">'花果山'</span> <span class="comment"># 向字典中添加key-value</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(d)</span></span><br><span class="line"><span class="comment"># setdefault(key[, default]) 可以用来向字典中添加key-value</span></span><br><span class="line"><span class="comment">#   如果key已经存在于字典中，则返回key的值，不会对字典做任何操作</span></span><br><span class="line"><span class="comment">#   如果key不存在，则向字典中添加这个key，并设置value</span></span><br><span class="line">result = d.setdefault(<span class="string">'name'</span>,<span class="string">'猪八戒'</span>)</span><br><span class="line">result = d.setdefault(<span class="string">'hello'</span>,<span class="string">'猪八戒'</span>)</span><br><span class="line">print(<span class="string">'result ='</span>,result)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># update([other])</span></span><br><span class="line"><span class="comment"># 将其他的字典中的key-value添加到当前字典中</span></span><br><span class="line"><span class="comment"># 如果有重复的key，则后边的会替换到当前的</span></span><br><span class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">d2 = &#123;<span class="string">'d'</span>:<span class="number">4</span>,<span class="string">'e'</span>:<span class="number">5</span>,<span class="string">'f'</span>:<span class="number">6</span>, <span class="string">'a'</span>:<span class="number">7</span>&#125;</span><br><span class="line">d.update(d2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(d)</span></span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">del </span><br><span class="line">popitem() : 删除键值对，返回元组，元组中有两个元素，第一个元素是删除的key，第二个是删除的value</span><br><span class="line">pop(key[, default]) : 删除键值对，返回值</span><br><span class="line">clear() : 清空字典</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除，可以使用 del 来删除字典中的 key-value</span></span><br><span class="line"><span class="keyword">del</span> d[<span class="string">'a'</span>]</span><br><span class="line"><span class="keyword">del</span> d[<span class="string">'b'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># popitem()</span></span><br><span class="line"><span class="comment"># 随机删除字典中的一个键值对，一般都会删除最后一个键值对</span></span><br><span class="line"><span class="comment">#   删除之后，它会将删除的key-value作为返回值返回</span></span><br><span class="line"><span class="comment">#   返回的是一个元组，元组中有两个元素，第一个元素是删除的key，第二个是删除的value</span></span><br><span class="line"><span class="comment"># 当使用popitem()删除一个空字典时，会抛出异常 KeyError: 'popitem(): dictionary is empty'</span></span><br><span class="line"><span class="comment"># d.popitem()</span></span><br><span class="line"><span class="comment"># result = d.popitem()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop(key[, default])</span></span><br><span class="line"><span class="comment"># 根据key删除字典中的key-value</span></span><br><span class="line"><span class="comment"># 会将被删除的value返回！</span></span><br><span class="line"><span class="comment"># 如果删除不存在的key，会抛出异常</span></span><br><span class="line"><span class="comment">#   如果指定了默认值，再删除不存在的key时，不会报错，而是直接返回默认值</span></span><br><span class="line">result = d.pop(<span class="string">'d'</span>)</span><br><span class="line">result = d.pop(<span class="string">'z'</span>,<span class="string">'这是默认值'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># del d['z'] z不存在，报错</span></span><br><span class="line"><span class="comment"># result = d.popitem()</span></span><br><span class="line"><span class="comment"># result = d.popitem()</span></span><br><span class="line"><span class="comment"># result = d.popitem()</span></span><br><span class="line"><span class="comment"># result = d.popitem()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear()用来清空字典</span></span><br><span class="line">d.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print('result =',result)</span></span><br><span class="line"><span class="comment"># print(d)</span></span><br></pre></td></tr></table></figure>

<p>复制字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy()</span></span><br><span class="line"><span class="comment"># 该方法用于对字典进行浅复制</span></span><br><span class="line"><span class="comment"># 复制以后的对象，和原对象是独立，修改一个不会影响另一个</span></span><br><span class="line"><span class="comment"># 注意，浅复制会简单复制对象内部的值，如果值也是一个可变对象，这个可变对象不会被复制</span></span><br><span class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">d2 = d.copy()</span><br><span class="line"><span class="comment"># d['a'] = 100</span></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'a'</span>:&#123;<span class="string">'name'</span>:<span class="string">'孙悟空'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">d2 = d.copy()</span><br><span class="line">d2[<span class="string">'a'</span>][<span class="string">'name'</span>] = <span class="string">'猪八戒'</span> <span class="comment"># 修改d2的name，d也会被修改</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'d = '</span>,d , id(d))</span><br><span class="line">print(<span class="string">'d2 = '</span>,d2 , id(d2))</span><br></pre></td></tr></table></figure>

<h4 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">keys(): 返回字典的所有的key</span><br><span class="line">value(): 返回一个序列，序列中保存有字典的所有的值</span><br><span class="line">item(): 返回一个序列，序列中包含有双值子序列</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字典</span></span><br><span class="line"><span class="comment"># keys() 该方法会返回字典的所有的key</span></span><br><span class="line"><span class="comment">#   该方法会返回一个序列，序列中保存有字典的所有的键</span></span><br><span class="line">d = &#123;<span class="string">'name'</span>:<span class="string">'孙悟空'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'gender'</span>:<span class="string">'男'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过遍历keys()来获取所有的键</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.keys() :</span><br><span class="line">    print(k , d[k])</span><br><span class="line"></span><br><span class="line"><span class="comment"># values()</span></span><br><span class="line"><span class="comment"># 该方法会返回一个序列，序列中保存有字典的所有的值</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</span><br><span class="line">    print(v)</span><br><span class="line"></span><br><span class="line"><span class="comment"># items()</span></span><br><span class="line"><span class="comment"># 该方法会返回字典中所有的项</span></span><br><span class="line"><span class="comment"># 它会返回一个序列，序列中包含有双值子序列</span></span><br><span class="line"><span class="comment"># 双值分别是，字典中的key和value</span></span><br><span class="line"><span class="comment"># print(d.items())</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items() :</span><br><span class="line">    print(k , <span class="string">'='</span> , v)</span><br></pre></td></tr></table></figure>

<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">- 集合和列表非常相似</span><br><span class="line">- 不同点：</span><br><span class="line">    1.集合中只能存储不可变对象</span><br><span class="line">    2.集合中存储的对象是无序（不是按照元素的插入顺序保存）</span><br><span class="line">    3.集合中不能出现重复的元素</span><br></pre></td></tr></table></figure>



<h4 id="集合基本操作"><a href="#集合基本操作" class="headerlink" title="集合基本操作"></a>集合基本操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">使用 &#123;&#125; 来创建集合</span><br><span class="line">使用 set() 函数来创建集合</span><br><span class="line">可以通过set()来将序列和字典转换为集合</span><br><span class="line">使用in和not in来检查集合中的元素</span><br><span class="line">使用len()来获取集合中元素的数量</span><br><span class="line">使用len()来获取集合中元素的数量</span><br><span class="line">add() 向集合中添加元素</span><br><span class="line">update() 将一个集合中的元素添加到当前集合中</span><br><span class="line">pop()随机删除并返回一个集合中的元素</span><br><span class="line">remove()删除集合中的指定元素 </span><br><span class="line">clear()清空集合</span><br><span class="line">copy()对集合进行浅复制</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合</span></span><br><span class="line"><span class="comment"># 使用 &#123;&#125; 来创建集合</span></span><br><span class="line">s = &#123;<span class="number">10</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125; <span class="comment"># &lt;class 'set'&gt;</span></span><br><span class="line"><span class="comment"># s = &#123;[1,2,3],[4,6,7]&#125; TypeError: unhashable type: 'list'</span></span><br><span class="line"><span class="comment"># 使用 set() 函数来创建集合</span></span><br><span class="line">s = set() <span class="comment"># 空集合</span></span><br><span class="line"><span class="comment"># 可以通过set()来将序列和字典转换为集合</span></span><br><span class="line">s = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">s = set(<span class="string">'hello'</span>)</span><br><span class="line">s = set(&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;) <span class="comment"># 使用set()将字典转换为集合时，只会包含字典中的键</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line">s = &#123;<span class="string">'a'</span> , <span class="string">'b'</span> , <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用in和not in来检查集合中的元素</span></span><br><span class="line"><span class="comment"># print('c' in s)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用len()来获取集合中元素的数量</span></span><br><span class="line"><span class="comment"># print(len(s))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add() 向集合中添加元素</span></span><br><span class="line">s.add(<span class="number">10</span>)</span><br><span class="line">s.add(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># update() 将一个集合中的元素添加到当前集合中</span></span><br><span class="line"><span class="comment">#   update()可以传递序列或字典作为参数，字典只会使用键</span></span><br><span class="line">s2 = set(<span class="string">'hello'</span>)</span><br><span class="line">s.update(s2)</span><br><span class="line">s.update((<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>))</span><br><span class="line">s.update(&#123;<span class="number">10</span>:<span class="string">'ab'</span>,<span class="number">20</span>:<span class="string">'bc'</span>,<span class="number">100</span>:<span class="string">'cd'</span>,<span class="number">1000</span>:<span class="string">'ef'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 100, 40, 'o', 10, 1000, 'a', 'h', 'b', 'l', 20, 50, 'e', 30&#125;</span></span><br><span class="line"><span class="comment"># pop()随机删除并返回一个集合中的元素</span></span><br><span class="line"><span class="comment"># result = s.pop()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove()删除集合中的指定元素</span></span><br><span class="line">s.remove(<span class="number">100</span>)</span><br><span class="line">s.remove(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear()清空集合</span></span><br><span class="line">s.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy()对集合进行浅复制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line">print(s , type(s))</span><br></pre></td></tr></table></figure>

<h4 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 笔记 #</span><br><span class="line"></span><br><span class="line">&amp;: 交集运算</span><br><span class="line">|: 并集运算</span><br><span class="line">-: 差集</span><br><span class="line">^: 异或集 获取只在一个集合中出现的元素</span><br><span class="line">&lt;&#x3D;: 检查一个集合是否是另一个集合的子集</span><br><span class="line">&lt;: 检查一个集合是否是另一个集合的真子集</span><br><span class="line">&gt;&#x3D;: 检查一个集合是否是另一个的超集</span><br><span class="line">&gt;: 检查一个集合是否是另一个的真超集</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码 #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在对集合做运算时，不会影响原来的集合，而是返回一个运算结果</span></span><br><span class="line"><span class="comment"># 创建两个集合</span></span><br><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp; 交集运算</span></span><br><span class="line">result = s &amp; s2 <span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># | 并集运算</span></span><br><span class="line">result = s | s2 <span class="comment"># &#123;1,2,3,4,5,6,7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 差集</span></span><br><span class="line">result = s - s2 <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^ 异或集 获取只在一个集合中出现的元素</span></span><br><span class="line">result = s ^ s2 <span class="comment"># &#123;1, 2, 6, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;= 检查一个集合是否是另一个集合的子集</span></span><br><span class="line"><span class="comment"># 如果a集合中的元素全部都在b集合中出现，那么a集合就是b集合的子集，b集合是a集合超集</span></span><br><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">result = a &lt;= b <span class="comment"># True</span></span><br><span class="line">result = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &lt;= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment"># True</span></span><br><span class="line">result = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125; &lt;= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt; 检查一个集合是否是另一个集合的真子集</span></span><br><span class="line"><span class="comment"># 如果超集b中含有子集a中所有元素，并且b中还有a中没有的元素，则b就是a的真超集，a是b的真子集</span></span><br><span class="line">result = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &lt; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment"># False</span></span><br><span class="line">result = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &lt; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125; <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;= 检查一个集合是否是另一个的超集</span></span><br><span class="line"><span class="comment"># &gt; 检查一个集合是否是另一个的真超集</span></span><br><span class="line">print(<span class="string">'result ='</span>,result)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>创建完博客的一些感想</title>
    <url>/2020/03/03/%E5%88%9B%E5%BB%BA%E5%AE%8C%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<h1 id="创建完博客的一些感想"><a href="#创建完博客的一些感想" class="headerlink" title="创建完博客的一些感想"></a>创建完博客的一些感想</h1><p>​    这几天沉迷于搭建自己的博客，中间也踩过好多坑，又因为本身对css，js这些不熟，出过好多bug。</p>
<p>​    但是每次完成一个小项目就会特别高兴，从刚开始啥都不知道，然后百度出来<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub pages</a>搭建个人博客的方法，发现了<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>这个快速、简洁且高效的博客框架。</p>
<a id="more"></a>

<h2 id="第一次-安装环境与在本地主机创建网站"><a href="#第一次-安装环境与在本地主机创建网站" class="headerlink" title="第一次 安装环境与在本地主机创建网站"></a>第一次 安装环境与在本地主机创建网站</h2><p>​    第一次搭建网站时，我心惊胆战的照着<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>官网的教程操作，第一次接触这个嘛，非常担心哪个地方操作不当，然后重来。下载<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>前，先安装<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>和<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>，然后通过npm输入<code>npm install -g hexo-cli</code>就可以安装<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo</a>框架了。(PS：我本来也不知道npm是啥，后来发现npm是随同NodeJS一起安装的，通过cmd使用就行了。)</p>
<p>​    安装好hexo之后，跟着官方文档来操作，输入<code>hexo init &lt;folder&gt;</code>就会在<em>folder</em>这个文件夹下新建所需要的文件了。创建完成后，大致会有这几个重要的文件夹和文件夹，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml #这是站点配置文件，之后很多设置要在这里面进行</span><br><span class="line">├── package.json #应用程序的信息，一般不用打开操作里面的文件</span><br><span class="line">├── scaffolds #模板文件夹，新建文章时，会根据这里面的模板来建立文件，比如文章的title，date等信息</span><br><span class="line">├── source #放用户的资源。除_posts文件夹之外，开头命名为_(下划线)的文件&#x2F;文件夹和隐藏的文件将会被忽略。Markdown(.md)和HTML(.html)文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</span><br><span class="line">|   ├── _drafts #草稿，我感觉一般用不上</span><br><span class="line">|   └── _posts #文章就放在这儿</span><br><span class="line">└── themes #主题文件夹。下载好模板后放在这儿。Hexo会根据主题来生成静态页面</span><br></pre></td></tr></table></figure>

<p>​    创建好后进入<code>_config.yml</code>文件，然后配置站点信息，具体的配置方法官方文档有，在想要修改的地方，在那个英文命后面修改就行了，看不懂的英文的复制粘贴，然后去网上翻译或者用别的软件翻译。我第一次使用时不知道这个。。。然后网站的title，name这些地方都是用的默认的，我直接在<code>public</code>文件夹里的<code>.html</code>文件改。然后用<code>hexo g</code>生成静态页面时，生成的<code>public</code>文件夹里的网站信息都是从<code>_config.yml</code>这个配置文件里获取的。（PS：一个小巧便捷的桌面翻译软件推荐：copytranslator，这个软件没广告，而且包含谷歌翻译，百度翻译，网易翻译等等，复制要翻译的英文，不用啥别的操作，译文就直接出来了。还有关于编辑<code>.yml</code>之类的文件的软件，网上很多，流行的像notepad++，sublime这些就挺好用的）</p>
<p>​    右键网站文件夹的根目录，点击<code>Git bash here</code>然后使用<code>hexo cl</code>、<code>hexo g</code>、<code>hexo s</code>，再在浏览器中输入<code>http://localhost:4000/</code>就可以看见自己的网站了（PS：<code>hexo cl</code>是<code>hexo clean</code>的缩写，清除<code>public</code>文件夹及之前的缓存；<code>hexo g</code>是生成静态页面，页面的信息与配置就在生成的<code>public</code>文件夹里；<code>hexo s</code>将网站部署到本地主机上，进行这一步操作后就能打开<code>http://localhost:4000/</code>看见自己的网站了，不然不能访问。 <code>hexo d</code>将在后面用到，这个命令会将网站文件上传至自己的GitHub仓库中，然后就可以在自己的GitHub pages网站上看到自己的博客了）</p>
<!--~~未完，待续，有时间再写~~-->]]></content>
      <categories>
        <category>日记</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2020/02/29/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="这是我的第一篇博克"><a href="#这是我的第一篇博克" class="headerlink" title="这是我的第一篇博克"></a>这是我的第一篇博克</h2><p>花了两天终于把自己的博客网站建起来了，虽然过程有点小复杂，但感觉还是挺好玩的。  </p>
<a id="more"></a>

<p>接下来我要完善博客，之后绑定域名，在博客中添加装饰品。  </p>
<p>然后把原本写在CSDN上的一些文章搬运到这里来。</p>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
</search>
